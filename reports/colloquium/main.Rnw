% !TeX document-id = {81191a9b-cc7a-4dfa-a09e-7e87a51baad2}
% !TeX TXS-program:compile = txs:///knit2pdf
\documentclass{beamer}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{amsmath}
\usepackage{xfrac}
\usepackage{color}
\usepackage{float}
\usepackage{graphicx}
\usepackage{algpseudocode}
\usepackage{algorithm}
\usepackage{calc}
%\usepackage{subcaption}
%\usepackage[hidelinks]{hyperref}
%\usepackage[all]{hypcap}

\graphicspath{{../final/images/}}

\newcommand{\algorithmautorefname}{Algorithm}

\DeclareMathOperator{\pos}{pos}
\DeclareMathOperator{\vote}{vote}
\DeclareMathOperator{\argmin}{arg\,min}

\newcommand{\agentsupb}{40 }

\author{Xeryus Stokkel}
\title{Argumentation Dialogues for Decentralized Cooperative Pathfinding}
\date{}

<<preprocess,echo=F,message=F,cache=F>>=
require(knitr)
require(xtable)
require(plyr)
require(tikzDevice)

# settings
options("xtable.caption.placement" = "top")
options("xtable.table.placement" = "t")
options("xtable.hline.after" = c(0))
options("scipen" = 1)

# Figure titles
perfgraph.title = "Comparison of performance of various algorithms on $10 000$
problem instances."
cachegraph.title = "Comparison of performance of various algorithms with and
without the use of a path cache. Dotted lines indicate that path cache wasn't
used while solid lines indicate that the cache was used."
solved.title = "Proportion of instances that were solved by each algorithm."
conflicts.title = "Mean number of dialogues that needed to be completed to find
a solution for instances with $n$ agents."
sizes.title="Comparison of occurence of different sizes of DPCA*+ dialogues."
quality.title="Number of loops in paths."
lengths.title="Mean sum of path length versus the number of agents in the
problem instance. The results for 2 to 10 agents have been cut of because the
path lengths for all algorithms are near identical for those amount of agents."

file = rev(list.files('../../results', 'benchmark*'))[1]
dat = read.csv(paste('../../results/', file, sep=""), header=T)
file = rev(list.files('../../results', 'cache*'))[1]
dat.cache = read.csv(paste('../../results/', file, sep=""), header=T)
file = rev(list.files('../../results', 'conflictsize-*'))[1]
sizes.dat = read.csv(paste('../../results/', file, sep=""), header=T)
file = rev(list.files('../../results', 'quality*'))[1]
quality.dat = read.csv(paste('../../results/', file, sep=""), header=T)

algorithms = c("ODID", "Naive", "Base", "Plus", "Window2", "Window4",
               "Window8", "DiMPP")
cannonical.names = c("OD+ID", "PCA*", "DPCA*", "DPCA*+", "WDPCA*-2",
                     "WDPCA*-4", "WDPCA*-8", "DiMPP")
cannonical.names.cache = cannonical.names[3:7]
color.set = c("red", "blue", "green", "grey60", "magenta", "cyan", "orange",
              "maroon")
color.set.cache = color.set[3:7]
linetypes = c(3, 2, 5, 6, 1, 2, 3, 4)
linewidth = 2

len = length(unique(dat$instance))
od      = sort(dat[dat$algorithm=='ODID',]$time * 1000)
naive   = sort(dat[dat$algorithm=='Naive',]$time * 1000)
base    = sort(dat[dat$algorithm=='Base',]$time * 1000)
plus    = sort(dat[dat$algorithm=='Plus',]$time * 1000)
window2 = sort(dat[dat$algorithm=='Window2',]$time * 1000)
window4 = sort(dat[dat$algorithm=='Window4',]$time * 1000)
window8 = sort(dat[dat$algorithm=='Window8',]$time * 1000)
dimpp   = sort(dat[dat$algorithm=='DiMPP',]$time * 1000)

dat.sub = subset(dat, !is.na(time))
solved = aggregate(time ~ factor(algorithm, levels=algorithms),
                   data=dat,
                   FUN=function(x)1-sum(is.na(x))/length(x),
                   na.action=na.pass)
solved.aggr = aggregate(time ~ factor(algorithm, levels=algorithms) +
                               num.agents,
                        data=dat,
                        FUN=function(x)1-sum(is.na(x))/length(x),
                        na.action=na.pass)
lengths = aggregate(length ~ factor(algorithm, levels=algorithms), data=dat,
                    FUN=mean)
dat.lengths = aggregate(length ~ num.agents + factor(algorithm,
levels=algorithms), data=dat, FUN=mean)
naive.vs.odid = mean(subset(dat, algorithm=="ODID")$time < subset(dat,
                        algorithm=="Naive")$time, na.rm=T)
base.vs.plus = t.test(dat[dat$algorithm=="Base","time"],
                      dat[dat$algorithm=="Plus","time"],
                      paired=T, alternative = "less")

# Influence of window on solve time
windowdat = subset(dat, algorithm %in% c("Window2", "Window4", "Window8"))
w.anova = anova(lm(windowdat$time ~ windowdat$algorithm +
                    windowdat$num.agents))
t.2vs4 = t.test(dat[dat$algorithm=="Window2","time"],
                dat[dat$algorithm=="Window4","time"])
t.2vs8 = t.test(dat[dat$algorithm=="Window2","time"],
                dat[dat$algorithm=="Window8","time"])
t.4vs8 = t.test(dat[dat$algorithm=="Window4","time"],
                dat[dat$algorithm=="Window8","time"])

conflicts.aggr = aggregate(cbind(initial.conflicts, solved.conflicts) ~
                           algorithm + num.agents, data=dat, FUN=mean)

len.cache = length(unique(dat.cache$instance))
base.nocache    = sort(dat.cache[dat.cache$algorithm=='Base' &
                                     dat.cache$cache=='False',]$time * 1000)
plus.nocache    = sort(dat.cache[dat.cache$algorithm=='Plus' &
                                     dat.cache$cache=='False',]$time * 1000)
window2.nocache = sort(dat.cache[dat.cache$algorithm=='Window2' &
                                     dat.cache$cache=='False',]$time * 1000)
window4.nocache = sort(dat.cache[dat.cache$algorithm=='Window4' &
                                     dat.cache$cache=='False',]$time * 1000)
window8.nocache = sort(dat.cache[dat.cache$algorithm=='Window8' &
                                     dat.cache$cache=='False',]$time * 1000)
base.cache      = sort(dat.cache[dat.cache$algorithm=='Base' &
                                     dat.cache$cache=='True',]$time * 1000)
plus.cache      = sort(dat.cache[dat.cache$algorithm=='Plus' &
                                     dat.cache$cache=='True',]$time * 1000)
window2.cache   = sort(dat.cache[dat.cache$algorithm=='Window2' &
                                     dat.cache$cache=='True',]$time * 1000)
window4.cache   = sort(dat.cache[dat.cache$algorithm=='Window4' &
                                     dat.cache$cache=='True',]$time * 1000)
window8.cache   = sort(dat.cache[dat.cache$algorithm=='Window8' &
                                     dat.cache$cache=='True',]$time * 1000)
aggr.cache = aggregate(. ~ num.agents + algorithm + cache, data=dat.cache,
                       FUN=mean)
cache.model = lm(time ~ num.agents + algorithm * cache, data=aggr.cache)
cache.anova = aov(cache.model)
cache.sum = summary(cache.anova)[[1]]

sizes.aggr = aggregate(cbind(X2, X3, X4, X5) ~ num.agents,
                       data=sizes.dat, FUN=mean)

quality.aggr = aggregate(cbind(length, loops) ~ num.agents + algorithm,
						 FUN=mean,
                         data=quality.dat)
@

\begin{document}

\frame{\maketitle}

\section{Problem Formulation}
\begin{frame}{Problem Formulation}
	\begin{columns}[c]
		\begin{column}{.4\textwidth}
			\begin{figure}
				\centering
				\def\svgscale{.7}
				\input{../final/images/conflict1.pdf_tex}
			\end{figure}
		\end{column}
		\begin{column}{.3\textwidth}
			\begin{figure}
				\centering
				\def\svgscale{.7}
				\input{../final/images/conflict2.pdf_tex}
			\end{figure}
		\end{column}
		\begin{column}{.3\textwidth}
			\begin{figure}
				\centering
				\def\svgscale{.7}
				\input{../final/images/conflict3.pdf_tex}
			\end{figure}
		\end{column}
	\end{columns}
\end{frame}

\begin{frame}{Problem formulation}
	\begin{figure}
		\centering
		\def\svgscale{.6}
		\input{../final/images/world.pdf_tex}
	\end{figure}
\end{frame}

%\section{Cooperative Pathfinding}
%\begin{frame}{Cooperative pathfinding}
%\begin{table}[b]
%    \centering
%    \label{tbl:planning-overview}
%    \begin{tabular}{l|l|l|l|l|l}
%        Method & Category & Complete & Priority & Comm. & Online \\
%        \hline
%        OD+ID & Centralized & Yes & No & All &
%        No \\
%        ICTS & Centralized & Yes & No & All & No \\
%        ADPP  & Decoupled & No & Yes & All & No \\
%        WHCA* & Decoupled & No & Yes & Window
%        & Yes \\
%        DMRCP & Decentralized & No & No & 2 nodes & Yes \\
%        DiMPP & Decentralized & Yes & Yes & Ring & No \\
%        ORCA & Decentralized & No & No & None & Yes \\
%        %Proposed & Decentralized & No & Partial & All & Before
%    \end{tabular}
%\end{table}
%\end{frame}

\begin{frame}{Cooperative pathfinding}
   \begin{itemize}
       \item Centralized/decoupled/decentralized
       \item Completeness
       \item Priority
       \item Communication limit
       \item Online
   \end{itemize}
\end{frame}

\begin{frame}{Cooperative pathfinding - OD+ID}
    \begin{itemize}
        \item Operator Decomposition
        \begin{itemize}
            \item Linear branching factor
        \end{itemize}
        \item Independence Detection
    \end{itemize}
    \begin{itemize}
        \item Centralized
        \item Complete
    \end{itemize}
\end{frame}

\begin{frame}{DiMPP}
    Distributed Multi-agent Path Planning
    \begin{itemize}
        \item Communicate in a ring
        \item Ring determines priority ordering
    \end{itemize}
    \begin{itemize}
        \item Decentralized
        \item Complete
    \end{itemize}
\end{frame}

\section{Computational Argumentation}
\begin{frame}{Deliberation Dialogues}
    \begin{itemize}
        \item Determine course of action
        \item Rules
        \item Stages
    \end{itemize}
\end{frame}

\section{Multi-agent Coordination}
\begin{frame}{Multi-agent Coordination}
    \begin{itemize}
        \item Partial Global Planning
        \item Continual Planning
    \end{itemize}
\end{frame}

\section{Family of algorithms}
\begin{frame}{PCA*}
    \begin{itemize}
        \item Find earliest conflict
        \item Evaluate all possible priority orderings
        \item Pick priority ordering with smallest increase in total cost
        \item Partial priority order
        \item Solving larger conflicts
    \end{itemize}
\end{frame}

\begin{frame}{PCA* example}
    \begin{columns}[t]
        \begin{column}{.33\textwidth}
            \centering
            \begin{figure}
                \def\svgscale{.6}
                \input{../final/images/pca-example1.pdf_tex}
            \end{figure}
        \end{column}
        \begin{column}{.33\textwidth}
            \centering
            \begin{figure}
                \def\svgscale{.6}
                \input{../final/images/pca-example2.pdf_tex}
            \end{figure}
            $a_1 > a_2$
        \end{column}
        \begin{column}{.33\textwidth}
            \centering
            \begin{figure}
                \def\svgscale{.6}
                \input{../final/images/pca-example3.pdf_tex}
            \end{figure}
            $a_2 > a_1$
        \end{column}
    \end{columns}
\end{frame}

\begin{frame}{PCA* example}
\begin{columns}[t]
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/pca-example2.pdf_tex}
        \end{figure}
        \[ a_1 > a_2 \]
    \end{column}
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/pca-example5.pdf_tex}
        \end{figure}
        $a_1 > a_2, a_2 > a_3$
    \end{column}
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/pca-example4.pdf_tex}
        \end{figure}
        $a_1 > a_2, a_3 > a_2$
    \end{column}
\end{columns}
\end{frame}

\begin{frame}{DPCA*}
    \begin{itemize}
        \item Use deliberation dialogue
        \item Evaluate effects of proposal on solution
    \end{itemize}
\end{frame}

\begin{frame}{DPCA* example}
    \begin{columns}[t]
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/dpca-example1.pdf_tex}
        \end{figure}
    \end{column}
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/dpca-example2.pdf_tex}
        \end{figure}
        \[ a_1 > a_2 \]
        \[ \vote_{a_1} = -3 \]
        \[ \vote_{a_2} = 6 \]
    \end{column}
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/dpca-example3.pdf_tex}
        \end{figure}
        \[ a_2 > a_1 \]
        \[ \vote_{a_1} = 0 \]
        \[ \vote_{a_2} = -3 \]
    \end{column}
\end{columns}
\end{frame}

\begin{frame}{DPCA* example}
\begin{columns}[t]
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/dpca-example3.pdf_tex}
        \end{figure}
        \[ a_2 > a_1 \]
    \end{column}
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/dpca-example4.pdf_tex}
        \end{figure}
        \[ a_2 > a_1, a_1 > a_3 \]
        \[ \vote_{a_1} = -3 \]
        \[ \vote_{a_3} = -3 \]
    \end{column}
    \begin{column}{.33\textwidth}
        \centering
        \begin{figure}
            \def\svgscale{.6}
            \input{../final/images/dpca-example5.pdf_tex}
        \end{figure}
        \[ a_2 > a_1, a_3 > a_1 \]
        \[ \vote_{a_1} = -3 \]
        \[ \vote_{a_3} = -3 \]
    \end{column}
\end{columns}
\end{frame}

\begin{frame}{WDPCA*}
    \begin{itemize}
        \item Continual planning $\to$ online algorithm
        \item Limit how far into the future agents resolve conflicts
        \item Spread computation 
        \item Ensure continued coordination
        \item Add flexibility to priority order
    \end{itemize}
\end{frame}

\section{Results}
\begin{frame}{Results - Performance}
<<perfgraph,echo=F,warning=F,cache=T,cache.beater=dat,dev='tikz',fig.height=2.5,fig.width=5,fig.align='center',fig.pos='t'>>=
op <- par(mar = c(3.8, 3.8, 1, 1))
plot(c(),
    type='l',
    log='y',
    col='red',
    xlim=c(0,10000),
    ylim=c(5, 2000),
    xlab='Problem instance',
    ylab='Time (ms)',
    frame.plot=F,
    xaxt="n",
    yaxs="i", yaxt="n"
)
axis(1, at=seq(0, 10000, 1000),
    labels=c(0, "", 2000, "", 4000, "", 6000, "", 8000, "", 10000))
axis(2, at=c(1, 10, 100, 1000, 2000), labels=c(1, 10, 100, 1000, ""))
lines(seq(length(od)), od, col=color.set[1], lwd=linewidth, lty=linetypes[1])
lines(seq(length(naive)), naive, col=color.set[2], lwd=linewidth, 
    lty=linetypes[2])
lines(seq(length(base)),  base,  col=color.set[3], lwd=linewidth, 
    lty=linetypes[3])
lines(seq(length(plus)),  plus,  col=color.set[4], lwd=linewidth, 
    lty=linetypes[4])
lines(seq(length(window2)), window2, col=color.set[5], lwd=linewidth, 
    lty=linetypes[5])
lines(seq(length(window4)), window4, col=color.set[6], lwd=linewidth, 
    lty=linetypes[6])
lines(seq(length(window8)), window8, col=color.set[7], lwd=linewidth, 	
    lty=linetypes[7])
lines(seq(length(dimpp)), dimpp, col=color.set[8], lwd=linewidth, 	
    lty=linetypes[8])
legend("bottomright",
        legend=cannonical.names,
        col=color.set,
        bty="n",
        cex=.8,
        lwd=linewidth,
        lty=linetypes)
@
\end{frame}

\begin{frame}{Results - Instances solved}
<<solved,echo=F,cache=T,cache.beater=solved.aggr,dev='tikz',fig.width=5,fig.height=2.5,fig.align='center',fig.pos='t'>>=
op <- par(mar = c(4, 3.8, 1, 1))
    plot(1,
    type='l',
    xlim=c(0,40),
    ylim=c(0,1),
    xlab='Agents in problem instance',
    ylab='Percentage solved',
    frame.plot = F,
    yaxs="i", yaxt="n",
    xaxs="i", xaxp=c(0, 40, 8)
)
axis(2,
    at=c(0, .25, .5, .75, 1),
    labels=c("0\\%", "", "50\\%", "", "100\\%"))
for(i in 1:length(algorithms)) {
    lines(solved.aggr[solved.aggr[,1]==algorithms[i],]$time,
        col=color.set[i], lty=linetypes[i], lwd=linewidth)
}
legend("bottomleft",
        legend=cannonical.names,
        col=color.set,
        bty="n",
        cex=.8,
        lwd=linewidth,
        lty=linetypes)
@
\end{frame}

\begin{frame}{Results - Solution cost}
<<lengths,echo=F,warning=F,cache=T,cache.beater=dat.lengths,dev='tikz',fig.width=5,fig.height=2.5,fig.align='center',fig.pos='t'>>=
op <- par(mar = c(3.8, 3.8, 1, 1))
plot(c(),
    type='n',
    xlim=c(5,40),
    ylim=c(100,360),
    frame.plot=F,
    xlab='Agents in problem instance',
    ylab='Sum of path lengths',
    yaxs="i", yaxp=c(100, 350, 5),
    xaxs="i"
)
for (i in 1:length(algorithms))
{
    lines(dat.lengths[dat.lengths[,2]==algorithms[i],]$length, col=color.set[i],
        lty=linetypes[i], lwd=linewidth)
}
legend("topleft",
        legend=cannonical.names,
        col=color.set,
        cex=.8,
        bty='n',
        lwd=linewidth,
        lty=linetypes)
@
\end{frame}

\begin{frame}{Results - Number of dialogues}
<<dialogues,echo=F,cache=T,cache.beater=conflicts.aggr,dev='tikz',fig.width=5,fig.height=2.5,fig.align='center',fig.pos='t'>>=
op <- par(mar = c(4, 3.8, 1, 1))
plot(1,
    type='l',
    xlim=c(0,40),
    ylim=c(0,70),
    xlab='Number of agents',
    ylab='Dialogues',
    frame.plot = F,
    yaxs="i", yaxp=c(0, 70, 7),
    xaxs="i", xaxp=c(0, 40, 8)
)
for(i in 1:length(algorithms))
{
    lines(conflicts.aggr[conflicts.aggr[,1]==algorithms[i],]$solved.conflicts,
        col=color.set[i], lwd=linewidth, lty=linetypes[i])
}
legend("topleft",
        legend=cannonical.names[2:7],
        col=color.set[2:7],
        bty="n",
        cex=.8,
        lwd=linewidth,
        lty=linetypes[2:7])
@
\end{frame}

\begin{frame}{Results - Loops in paths}
<<loops,echo=F,warning=F,cache=T,cache.beater=quality.aggr,dev='tikz',fig.width=5,fig.height=2.5,fig.align='center',fig.pos='t'>>=
op <- par(mar = c(3.8, 3.8, 1, 1))
plot(c(), c(),
    xlim=c(0,40),
    ylim=c(0,0.6),
    frame.plot=F,
    type='n',
    xlab="Number of agents",
    ylab="Number of loops",
    xaxs="i", xaxp=c(0, 40, 8),
    yaxs="i"
)
for(i in 5:7) {
    lines(quality.aggr[quality.aggr[,2]==algorithms[i],]$loops,
          col=color.set[i], lwd=linewidth, lty=linetypes[i])
}
legend("topleft",
        legend=cannonical.names[5:7],
        col=color.set[5:7],
        cex=.8,
        bty='n',
        lwd=linewidth,
        lty=linetypes[5:7])
@
\end{frame}

\begin{frame}{Results - Number of agents in conflict}
<<conflict-sizes,echo=F,cache=T,cache.beater=sizes.aggr,dev='tikz',fig.width=5,fig.height=2.5,fig.align='center',fig.pos='t'>>=
op <- par(mar = c(4, 3.8, 1, 1))
plot(1,
    type='n',
    xlim=c(1,40),
    ylim=c(0,15),
    xlab="Number of agents in problem",
    ylab="Number of conflicts",
    xaxs="i", xaxp=c(0, 40, 8),
    yaxs="i", yaxp=c(0, 15, 3),
    frame.plot = F
)
points(sizes.aggr$X2[1:31], col='red', pch=8)
points(sizes.aggr$X3, col='blue', pch=4)
points(sizes.aggr$X4, col='green', pch=3)
lines(smooth.spline(sizes.aggr$X2[1:31], spar=0.35), col="red", lwd=linewidth)
lines(smooth.spline(sizes.aggr$X3[1:31], spar=0.35), col="blue", lwd=linewidth)
lines(smooth.spline(sizes.aggr$X4, spar=0.35), col="green", lwd=linewidth)
legend("topleft",
        legend=c('2 agents', '3 agents', '4 agents'),
        col=c("red", "blue", "green"),
        pch=c(8, 4, 3),
        bty='n',
        lwd=linewidth)
@
\end{frame}

\begin{frame}{Results - Cache}
<<cache,echo=F,warning=F,cache=T,cache.beater=dat.cache,dev='tikz',fig.width=5,fig.height=2.5,fig.align='center',fig.pos='t'>>=
op <- par(mar = c(3.8, 3.8, 1, 1))
plot(c(), c(),
    type='l',
    log='y',
    col='red',
    xlim=c(1,len.cache),
    ylim=c(5, 2000),
    xlab='Instance',
    ylab='Time (ms)',
    frame.plot=F,
    xaxp=c(0, 1000, 10),
    yaxs="i", yaxt="n"
)
axis(2, at=c(1, 10, 100, 1000, 2000), labels=c(1, 10, 100, 2000, ""))
lines(seq(length(base.nocache)), base.nocache, col=color.set.cache[1], lty=3,
        lwd=linewidth)
lines(seq(length(window2.nocache)), window2.nocache, col=color.set.cache[3],
        lty=3, lwd=linewidth)
lines(seq(length(window8.nocache)), window8.nocache, col=color.set.cache[5],
        lty=3, lwd=linewidth)
lines(seq(length(base.cache)), base.cache, col=color.set.cache[1], lty=1,
        lwd=linewidth)
lines(seq(length(window2.cache)), window2.cache, col=color.set.cache[3], lty=1,
        lwd=linewidth)
lines(seq(length(window8.cache)), window8.cache, col=color.set.cache[5], lty=1,
        lwd=linewidth)
legend("bottomright",
        legend=cannonical.names.cache[c(1,3,5)],
        col=color.set.cache[c(1,3,5)],
        bty="n", cex=.8, lwd=linewidth)
@
\end{frame}

\begin{frame}{Discussion}
\begin{itemize}
    \item DPCA* vs DPCA*+
    \item Effect of window
    \item Complexity of deliberation dialogues
    \item Less abstract solutions
\end{itemize}
\end{frame}

\section{Discussion}

%\input{tex/intro}
%\input{tex/problem}
%\input{tex/related_work}
%\input{tex/method}
%<<resuls-file,child='tex/results.Rnw'>>=
%@
%\input{tex/discussion}


%\bibliographystyle{plain}
%\bibliography{literature}

\end{document}
